/** Copyright (c) 2020 The ZMK Contributors* * SPDX-License-Identifier: MIT */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NUMBERS 1
// #define THEORY 2

// ADDS CONTINUE LIST TO CAPS-WORD TURNING IT INTO CAPS-SENTENCE
&caps_word { continue-list = <SPACE DOT COMMA SEMI COLON UNDER MINUS AMPS EXCL SLASH TAB STAR PIPE BSPC>; };

/ {
        behaviors {
        //  SHIFTED KEYS 'SWITCHING PARTNERS' MOD-MORPH BEHAVIORS
        //  morphs shifted keys: to different shifted & un-shifted characters
                tes: tab_escape { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp TAB>, <&kp ESC>; mods = <(MOD_RSFT|MOD_RSFT)>; };
                qxm: qmark_xmark { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp QMARK>, <&kp EXCL>; mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <(MOD_LSFT)>; };
                csc: comma_scolon { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp COMMA>, <&kp SEMI>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                dcl: dot_colon { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOT>, <&kp COLON>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                bsd: back_delete { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp BSPC>, <&kp DEL>; mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <(MOD_RSFT)>; };
                lsu: lsft_under { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LSFT>, <&kp UNDER>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                rsm: rsft_minus { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp RSFT>, <&kp MINUS>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                asl: amps_slash { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp AMPS>, <&kp SLASH>; mods = <(MOD_LSFT|MOD_RSFT)>; };

        //  LALT KEY 'CAP-SENTENCE' CAPS-WORD & HOLD-TAP BEHAVIORS
        //  mods caps-word to caps-sentence: space, letters, punctuation, & mod keys added to continue
            //    cps:  caps_sentence { compatible = "zmk,behavior-caps-word"; #binding-cells = <0>; mods = <(MOD_LSFT|MOD_RSFT)>; }; //continue_list = <SPACE>;
            //    caps_word { compatible = "zmk,behavior-caps-word"; #binding-cells = <0>; mods = <(MOD_LSFT|MOD_RSFT)>; }; //continue_list = <SPACE>;
                opc: opt_caps { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&kp>, <&caps_word>; flavor = "hold-preferred"; tapping-term-ms = <250>; }; // '&opc RALT 0' in keymap

        //  COMMAND KEY 'CONTROL' HOLD-TAP BEHAVIORS
        //  mods CMND keys to be: hold-> CTRL & tap-> CMD+longSTICKY-KEY (tap & next key pressed gives CMD-key)
                lsk: long_stickey { compatible = "zmk,behavior-sticky-key"; #binding-cells = <1>; bindings = <&kp>; release-after-ms = <2000>; quick-release; /delete-property/ignore-modifiers;} ;
                lcc: lcmd_control { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&kp>, <&lsk>; tapping-term-ms = <375>; quick-tap-ms = <0>; flavor = "tap-preferred"; }; // '&lcc LCTRL LCMD' in keymap
                rcc: rcmd_control { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&kp>, <&lsk>; tapping-term-ms = <375>; quick-tap-ms = <0>; flavor = "tap-preferred"; };

        //  SPACE KEY 'TO LAYERS' HOLD-TAP BEHAVIORS
             // rsn: rspace_tonum { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; tapping-term-ms = <250>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&to NUMBERS>, <&kp SPACE>; };
             // lss: lspace_tosym { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; tapping-term-ms = <150>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&to SYMBOLS>, <&kp SPACE>; };
//         1         2         3         4         5         6         7         8         9         0         1         2         3         4         56         7         8         9
        };
        keymap {
                compatible = "zmk,keymap";
                default_layer {

        /* tab-esc  qmark-xmark  cma-semi   dot-col     P      Y        M      L        D      C      F   alt-capslk
          lsft-under     O          A          E        I      U        H      N        T      R      S   rshft-minus
              '      amp-slash      X          Q        K      J        V      B        G      W      Z   bkshft-del
                                           lcm_cnt  lspc-num  &RET    &RET  rsp_sym  rcm_cnt                        */
                        bindings = <  // tes qxm csc dcl bsd opc lsu asl rsm lcc rcc
        &tes    &qxm    &csc     &dcl     &kp P     &kp Y       &kp M     &kp L    &kp D    &kp C    &kp F    &opc RALT 0
        &lsu   &kp O    &kp A    &kp E    &kp I     &kp U       &kp H     &kp N    &kp T    &kp R    &kp S    &rsm
       &kp SQT  &asl    &kp X    &kp Q    &kp K     &kp J       &kp V     &kp B    &kp G    &kp W    &kp Z    &bsd
                       &lcc LCTRL LCMD  &kp SPACE  &kp RET     &kp RET    &kp SPACE     &rcc LCTRL LCMD
                        >;
                };
               number_layer {
         /* glass    &        ,      .       ∨       +         -        ^        =      *       #    trans
            glass   8-F8    6-F6    4-F4    2-F2    0-F0      1-F1     3-F3     5-F5   7-F7   9-F9   trans
              |     @-/       [      <       {       (          )       }        >      ]       \    trans
                                lcm_cnt  lspc-num   &RET      &RET   rsp_sym  rcm_cnt  */
                        bindings = <
    &trans   &kp AMPS   &kp COMMA   &kp DOT  &kp CARET   &kp PLUS     &kp MINUS  &kp CARET   &kp EQUAL  &kp STAR  &kp HASH  &trans
    &trans    &kp O       &kp A      &kp E     &kp I      &kp U         &kp H      &kp N      &kp T       &kp R    &kp S    &trans
    &trans    &asl        &kp X      &kp Q     &kp K      &kp J         &kp V      &kp B      &kp G       &kp W    &kp Z    &trans
                                    &trans    &trans      &trans       &trans      &trans     &trans
                        >;
                };
/*
                theory_layer {
        /* glass    &        ,      .       ∨       +         -        ^        =      *       #    trans
            glass   8-F8    6-F6    4-F4    2-F2    0-F0      1-F1     3-F3     5-F5   7-F7   9-F9   trans
              |     @-/       [      <       {       (          )       }        >      ]       \    trans
                                lcm_cnt  lspc-num   &RET      &RET   rsp_sym  rcm_cnt  */
/*                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                }; */
         };
  };
