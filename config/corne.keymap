/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
/*
    // modmorph.dtsi
        #define str(s) #s
        #define MOD_MORPH(NAME, KEY, MOD_KEY) \
          mm_##NAME: mm_##NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            label = str(NAME); \
            #binding-cells = <0>; \
            bindings = <&kp KEY>, <&kp MOD_KEY>; \
            mods = <(MOD_LSFT|MOD_RSFT)>; \
            masked_mods =  <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        }
          "When a modifier specified in mods is being held, it won't be sent along with
             the morphed keycode unless it is also specified in keep-mods." (keep-mods = 0 by default)
             bindings = <key value>, <modded key value>;
                mask-mods: for key values that requires a mod
                keep-mods: for modded key values that require a mod
                eg. bindings = <&kp TAB>, */

/*        MOD_MORPH(dot_col, DOT, SEMI)
        MOD_MORPH(comma_pipe, COMMA, BSLH)
        MOD_MORPH(lbkt_excl, LBKT, N1)
        MOD_MORPH(rbkt_at, RBKT, N2)
        MOD_MORPH(lcbr_hash, LBRC, N3)
        MOD_MORPH(rcbr_dlr, RBRC, N4)
        MOD_MORPH(lrbr_amps, LS(N9), AMPS)
        MOD_MORPH(rrbr_star, LS(N0), STAR)
        #undef MOD_MORPH
*/
/ {
        behaviors {
        //  SHIFTED KEYS 'SWITCHING PARTNERS' MOD-MORPH BEHAVIORS
            // tes: tab_escape { compatible = "zmk,behavior-mod-morph"; label ="tab_esc"; #binding-cells = <0>; bindings = <&kp TAB>, <&kp ESCAPE>; mods = <(MOD_RSFT)>; };
            // qxm: qmark_xmark { compatible = "zmk,behavior-mod-morph"; label = "qma_xma"; #binding-cells = <0>; bindings = <&kp QUESTION>, <&kp EXCLAMATION>; mods = <(MOD_RSFT)>; }; ‚é∑
            csc: comma_scolon { compatible = "zmk,behavior-mod-morph"; label = "com_sem"; #binding-cells = <0>; bindings = <&kp COMMA>, <&kp SEMI>; mods = <(MOD_RSFT)>; };
            // dcl: dot_colon { compatible = "zmk,behavior-mod-morph"; label = "dot_col"; #binding-cells = <0>; bindings = <&kp DOT>, <&kp COLON>; mods = <(MOD_LSFT|MOD_RSFT)>; }; // keep-mods = <(LSFT)>; };
            // bsd: back_delete { compatible = "zmk,behavior-mod-morph"; label = "bac_del"; #binding-cells = <0>; bindings = <&kp BSPC>, <&kp DEL>; mods = <(MOD_LSFT)>; }; // keep-mods = <(MOD_LSFT)>; };
            // lsu: lsft_under { compatible = "zmk,behavior-mod-morph"; label = "lsu_und"; #binding-cells = <0>; bindings = <&kp LSFT>, <&kp UNDER>; mods = <(MOD_RSFT)>; masked_mods = <(MOD_LSFT)>; };
            /*
             * ZMK Behaviors Testing 13jul24 8:409p, ve5f0fea1
             * testing: Shifted Keys ‚ÄòSwitching Partners‚Äô Mod-Morph Behaviors ( lower | upper )
             *      qxm - qmark_xmark:	? | !  ‚é∑
             *      css - comma_scolon:	, | :  ùùå right shift is not masked
             *      dcl - dot_colon:	. | .  ùùå right shift is not kept
             *      bsd - back_delete:	pattern: 210||012w bspc: 2||012 ‚é∑ |  bspc: 32100123 ùùå left shift is automatically masked { CORRECTION: '&kp BACKSPACE' was in bindings & not "bsd"
             *      lsu - lsft_under:	(lt-shift) ‚é∑ both left & right shift are perfect | (rt-shift)  ùùå right shift is automatically masked { CORRECTION: '&kp LSFT' was in bindings & not "lsu"
             * to-do‚Äôs:
             *      1  css - add masked-mods = <(RSFT)>
             *      2  figure out how to keep LSFT mod
             *      3  figure out how to keep RSFT mod
             */
            //  rsd: rsft_dash { compatible = "zmk,behavior-mod-morph"; label = "rsu_dsh"; #binding-cells = <0>; bindings = <&kp RSFT>, <&kp DASH>; mods = <(MOD_LSFT)>; masked_mods = <(MOD_LSFT|MOD_RSFT)>; };
            //  afs: amps_fslsh { compatible = "zmk,behavior-mod-morph"; label = "amp_fsl"; #binding-cells = <0>; bindings = <&kp AMPS>, <&kp FSLH>; mods = <(MOD_RSFT)>; }; // masked_mods = <(MOD_RSFT)>; };
        //  LALT KEY 'CAP-SENTENCE' CAPS-WORD BEHAVIOR
            //  turns caps-word into caps-sentence ('space' in continue list)
            // cse:  caps_sntnc { compatible = "zmk,behavior-caps-word"; label = "cap_sen"; #binding-cells = <0>; mods = <(MOD_LSFT|MOD_RSFT)>; continue-list = <SPACE>; };
            // acs: alt_capss { compatible = "zmk,behavior-hold-tap"; label = "alt_csc"; #binding-cells = <2>; tapping-term-ms = <150>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&tog caps_sen>, <&osk LSHFT>; };
        //  SPACE KEY 'TO LAYERS' HOLD-TAP BEHAVIORS
            // lsn: lspace_tonum { compatible = "zmk,behavior-hold-tap"; label = "lsp_num"; #binding-cells = <2>; tapping-term-ms = <150>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&to NUMBERS>, <&kp SPACE>; };
            // rss: rspace_tosym { compatible = "zmk,behavior-hold-tap"; label = "rsp_sym"; #binding-cells = <2>; tapping-term-ms = <150>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&to SYMBOLS>, <&kp SPACE>; };
        //  COMMAND KEY 'CONTROL' HOLD-TAP BEHAVIORS
            // lsk: long_sticky_key { compatible = "zmk,behavior-sticky-key"; label = "lng_stk"; #binding-cells = <1>; bindings = <&kp>; release-after-ms = <2000>; quick-release; /delete-property/ignore-modifiers; };
            // lcc: lcmd_control { compatible = "zmk,behavior-hold-tap"; label = "lcm_cnt"; #binding-cells = <2>; tapping-term-ms = <150>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&kp LCMD>, <&osk LCTRL>; };
            // rcc: rcmd_control { compatible = "zmk,behavior-hold-tap"; label = "rcm_cnt"; #binding-cells = <2>; tapping-term-ms = <150>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&kp RCMD>, <&osk RCTRL>; };
        /*      EXAMPLES
                dot_col: dot_col { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; label = "dot_col"; bindings = <&kp (((((0x07) << 16) | (0x37))))>, <&kp (((((0x07) << 16) | (0x33))))>; mods = <(0x02|0x20)>; masked_mods = <(0x02)>; };
                                                                                                                                          LSFT           DOT                    RSFT         COLON               LSFT RSFT                    LSFT
                comma_pipe: comma_pipe { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; label = "comma_pipe"; bindings = <&kp ((((0x07) << 16) | (0x36)))>, <&kp (((((0x07) << 16) | (0x31))))>; mods = <(0x02|0x20)>; masked_mods = <(0x02)>; };
                                                                                                                                                    LSFT        COMMA                   LSFT        PIPE                LSFT RSFT                    LSFT */
        };
        keymap {
                compatible = "zmk,keymap";
                default_layer {
            /*  &tes       &qxm     &csc     &dcl                                                         &bsd
               tab_esc   qma_xma  com_sem  dot_col    P      Y          M      L        D      C      F   bac_del
         &acs  alt_csc      O        A        E       I      U          H      N        T      R      S     &SQT
         &lsu  lsft_under  amp_fsl    X       Q       K      J          V      B        G      W      Z   rsft_dash &rsd
                            &afs          lcm_cnt  lsp_num  &RET      &RET  rsp_sym  rcm_cnt
                                            &lcc     &lsn                    &rss      &rcc             */
                        bindings = <
             &kp TAB   &kp N1     &csc    &kp N2   &kp P    &kp Y       &kp M   &kp L    &kp D    &kp C   &kp F   &kp BACKSPACE
            &kp LALT   &kp O    &kp A   &kp E   &kp I    &kp U       &kp H   &kp N    &kp T    &kp R   &kp S   &kp SQT
            &kp LSFT  &kp AMPS  &kp X   &kp Q   &kp K    &kp J       &kp V   &kp B    &kp G    &kp W   &kp Z   &kp RSFT
                                   &kp LCMD  &kp SPACE  &kp RET   &kp RET  &kp SPACE  &kp RCMD
                        >;
                };
/*                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                                    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                }; */
         };
  };
