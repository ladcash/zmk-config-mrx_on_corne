/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        behaviors {
        //  SHIFTED KEYS 'SWITCHING PARTNERS' BEHAVIORS
                 /* tbm: tab_minus { compatible = "zmk,behavior-mod-morph"; label ="tbm"; #binding-cells = <0>; bindings = <&kp TAB>, <&kp MINUS>; mods = <(MOD_RSFT)>; keep-mods = <(MOD_RSFT)>; }; */
                 /*   qex: question_exclamation { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp QUESTION>, <&kp EXCLAMATION>; mods = <(MOD_RSFT)>; keep-mods = <(MOD_RSFT)>; }; */

                 /*   csc: comma_semicolon { compatible = "zmk,behavior-mod-morph"; label = "comma_semicolon"; #binding-cells = <0>; bindings = <&kp COMMA>, <&kp SEMICOLON>; mods = <(MOD_RSFT)>; keep-mods = <(MOD_RSFT)>; }; */
                 /*                                                                                                                                          comma                              pipe              lsft rsft                    lsft       */
          /* comma_pipe: comma_pipe { compatible = "zmk,behavior-mod-morph"; label = "comma_pipe"; #binding-cells = <0>; bindings = <&kp ((((0x07) << 16) | (0x36)))>, <&kp (((((0x07) << 16) | (0x31))))>; mods = <(0x02|0x20)>; masked_mods = <(0x02)>; }; */

                 /* pcl: period_colon { compatible = "zmk,behavior-mod-morph"; label = "pcl"; #binding-cells = <0>; bindings = <&kp DOT>, <&kp COLON>; mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <(LSFT)>; }; */
                /*  mm_dot_col: mm_dot_col { compatible = "zmk,behavior-mod-morph"; label = "dot_col"; #binding-cells = <0>; bindings = <&kp (((((0x07) << 16) | (0x37))))>, <&kp (((((0x07) << 16) | (0x33))))>; mods = <(0x02|0x20)>; masked_mods = <(0x02)>; } */

                  bsd: bspc_del { compatible = "zmk,behavior-mod-morph"; label = "bspc_del"; #binding-cells = <0>; bindings = <&kp BACKSPACE>, <&kp DELETE>; mods = <(MOD_LSFT)>; keep-mods = <(MOD_LSFT)>; };
                 /* aus: alt_underscore { compatible = "zmk,behavior-mod-morph"; label = "aus"; #binding-cells = <0>; bindings = <&kp LALT>, <&kp UNDER>; mods = <(MOD_RSFT|MOD_LSFT)>; masked_mods = <(MOD_LALT|MOD_LSFT)>; }; */
                 /* afs: ampersand_forward_slash { compatible = "zmk,behavior-mod-morph"; label = "afs"; #binding-cells = <0>; bindings = <&kp AMPS>, <&kp FSLH>; mods = <(MOD_RSFT)>; masked_mods = <(MOD_RSFT)>; }; */
        //  SHIFT KEY 'CAPITAL' BEHAVIORS
                 /* cse:  caps_sentence{ compatible = "zmk,behavior-caps-word"; label = "cse"; #binding-cells = <0>; mods = <(MOD_LSFT|MOD_RSFT)>; continue-list = <SPACE>; }; */
                 /* lcs: left_caps_sentence { compatible = "zmk,behavior-hold-tap"; label = "lcs"; #binding-cells = <2>; tapping-term-ms = <150>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&tog caps_sent>, <&osk LSHFT>; }; */
                 /* rcs: right_caps_sentence { compatible = "zmk,behavior-hold-tap"; label = "rcs"; #binding-cells = <2>; tapping-term-ms = <150>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&kp caps_sent>, <&osk RSHFT>; }; */
        //  SPACE KEY 'TO LAYERS' BEHAVIORS
                 /* stnl: left_space_to_number { compatible = "zmk,behavior-hold-tap"; label = "stnl"; #binding-cells = <2>; tapping-term-ms = <150>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&to NUMBERS>, <&kp SPACE>; }; */
                 /* stsl: right_space_to_symbol_layer { compatible = "zmk,behavior-hold-tap"; label = "stsl"; #binding-cells = <2>; tapping-term-ms = <150>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&to SYMBOLS>, <&kp SPACE>; }; */
        //  COMMAND KEY 'CONTROL' BEHAVIORS
                 /* lsk: long_sticky_key { compatible = "zmk,behavior-sticky-key"; label = "lsk"; #binding-cells = <1>; bindings = <&kp>; release-after-ms = <2000>; quick-release; /delete-property/ignore-modifiers; }; */
                 /* lcc: left_command_control { compatible = "zmk,behavior-hold-tap"; label = "lcc"; #binding-cells = <2>; tapping-term-ms = <150>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&kp LCMD>, <&osk LCTRL>; }; */
                 /* rcc: right_command_control { compatible = "zmk,behavior-hold-tap"; label = "rcc"; #binding-cells = <2>; tapping-term-ms = <150>; quick-tap-ms = <0>; flavor = "tap-preferred"; bindings = <&kp RCMD>, <&osk RCTRL>; }; */
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
/*
            TAB   &qex QUESTION|EXCL  COMMA|SEMI   DOT|COLON    P        Y            M        L                D        C      F   BACKSPACE|DELETE
       LALT|UNDER        O               A          E           I         U          H        N               T        R      S       SQT|DQT
   LSFT|caps sentence  AMPS|FSLH         X        Q              K          J        V        B              G        W     Z    RSFT|caps sentence
                                            LCMD|LCNTRL   SPACE|to_numb    RET    RET  SPACE|to_symb  RCMD|RCNTRL                           */

/*                        bindings = <
&tbm TAB   &qex QUESTION   &csc COMMA    &pcl PERIOD    &kp P    &kp Y    &kp M    &kp L    &kp D    &kp C    &kp F   &bsd BSPC
&kp LCTRL   &kp O    &kp A     &kp E     &kp I    &kp U    &kp H    &kp N    &kp T    &kp R    &kp S   &kp SQT
&kp LSFT  &kp AMPS  &kp X     &kp Q     &kp K    &kp J    &kp V    &kp B    &kp G    &kp W    &kp Z   &kp RSFT
                        &kp LCMD    &kp RCTRL   &kp RET  &kp RET  &kp LCTRL   &kp RCMD
            >; */
                        bindings = <
    &kp TAB   &kp N1  &kp N2  &kp N3    &kp P      &kp Y    &kp M    &kp L      &kp D      &kp C    &kp F     &kp BACKSPACE
  &kp LCTRL   &kp O          &kp A       &kp E     &kp I      &kp U    &kp H    &kp N      &kp T      &kp R    &kp S     &kp SQT
   &kp LSFT   &kp Z          &kp X       &kp C     &kp V      &kp B    &kp N    &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp RSFT
                                         &kp LCMD  &kp SPACE  &kp RET  &kp RET  &kp SPACE  &kp RCMD
                        >;
                };
/*                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                                    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                }; */
         };
  };
