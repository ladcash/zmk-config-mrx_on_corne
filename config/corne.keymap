// Copyright (c) 2020 The ZMK Contributors* * SPDX-License-Identifier: MIT
        #include <behaviors.dtsi>
        #include <dt-bindings/zmk/bt.h>
        #include <dt-bindings/zmk/keys.h>
        #include <dt-bindings/zmk/rgb.h>
        // #include "zmk-helpers/helper.h"
        // #include "zmk-helpers/unicode-chars/greek.dtsi"

        #define MRX 0       // MrX's DVORAKish KEY LAYOUT
        #define QWE 1       // QWERTY KEY LAYOUT
        #define NUM 2       // NUMBERS & ITS SYMBOLS
     // #define NUM 3       // NUMBERS & ITS SYMBOLS
     // #define MAT 4       // MATHS & THEIR SYMBOLS
        #define xxx &none
        #define ___ &trans
/*
        1         2         3         4         5         6         7         8         9         0        11       12       13        14        15        16        17        18        19        20        21        22
*/
        // add continue list to CAPS-WORD to turn it into CAPS-SENTENCE
        &caps_word { continue-list = <SPACE DOT COMMA SEMI COLON UNDER MINUS AMPS EXCL SLASH TAB STAR PIPE BSPC>; };

/ {
        behaviors {
        //  ALL LAYERS:
                //  hold-tap of command keys for to-layers switching between BASE, QWERTY & NUMBERS layers | format: &jtl MODIFIER LAYER
                jtl: jump_to_layer { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&kp>, <&to>; tapping-term-ms = <280>; quick-tap-ms = <0>; flavor = "tap-preferred"; }; // '&jtl R/LGUI LAYER' in keymaps

                // mod-morphing command keys 'hold' for arrow keys navigation
                // format: key: name { compatible = "zmk,behavior-mod-morph"; label = "LABEL"; #binding-cells = <0>; bindings = <WITHOUT MOD BEHAVIOR>, <WITH MOD BEHAVIOR>; mods = <(MOD_LGUI|MOD_RGUI)>; keep-mods = <(MOD_LSFT)>; };
        //  DEFAULT LAYER:
                //  mod-morphing default layer shifted alpha keys to give them new shifted partners | tes qxm csc dcl bsd opc qtq asl qtq lcc rcc h2l l2u t2r n2d
                tes: tab_escape { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp TAB>, <&kp ESC>; mods = <(MOD_RSFT|MOD_RSFT)>; };
                qxm: qmark_xmark { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp QMARK>, <&kp EXCL>; mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <(MOD_LSFT)>; };
                csc: comma_scolon { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp COMMA>, <&kp SEMI>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                dcl: dot_colon { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOT>, <&kp COLON>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                bsd: back_delete { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp BSPC>, <&kp DEL>; mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <(MOD_RSFT)>; };
                lsu: lsft_under { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LSFT>, <&kp UNDER>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                rsm: rsft_minus { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp RSFT>, <&kp MINUS>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                asl: amps_slash { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp AMPS>, <&kp SLASH>; mods = <(MOD_LSFT|MOD_RSFT)>; };

                //  hold-tapping default layer key for 'option/cap-sentence' by extending caps-word (above behaviors{ ) with a continue list: spaces, any letter, punctuation, & modified keys
                opc: opt_caps { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&kp>, <&caps_word>; tapping-term-ms = <280>; flavor = "tap-preferred"; }; // '&opc RALT 0' in keymap

                //  H, L, T & N KEYS MODDED FOR DEFAULT LAYER NAVIGATION:  h2l l2u t2r n2d
                h2l: h_to_left { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp H>, <&kp LEFT>; mods = <(MOD_RGUI|MOD_LGUI)>; };
                l2u: u_to_up { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp L>, <&kp UP>; mods = <(MOD_RGUI|MOD_LGUI)>; };
                t2r: t_to_right { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp T>, <&kp RIGHT>; mods = <(MOD_RGUI|MOD_LGUI)>; };
                n2d: j_to_down { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N>, <&kp DOWN>; mods = <(MOD_RGUI|MOD_LGUI)>; };

                //  NUMBER LAYER:
                //  mod-morphing number layer shifted number keys to give them F-KEY shifted partners | nf tf thf fof fif sif sef eif nif zef elf twf
                onf: one_fone { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N1>, <&kp F1>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                tof: two_ftwo { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N2>, <&kp F2>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                thf: three_fthree { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N3>, <&kp F3>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                fof: four_ffour { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N4>, <&kp F4>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                fif: five_ffive { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N5>, <&kp F5>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                sif: two_fsix { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N6>, <&kp F6>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                sef: two_fseven { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N7>, <&kp F7>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                eif: eight_feight { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N8>, <&kp F8>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                nif: nine_fnine { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N9>, <&kp F9>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                zef: zero_ften { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N0>, <&kp F10>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                elf: minus_feleven { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp MINUS>, <&kp F11>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                twf: two_ftwelve { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp PLUS>, <&kp F12>; mods = <(MOD_LSFT|MOD_RSFT)>; };

                //  mod-morphing number layer shifted symbol keys to give them new shifted partners | dha eqt plm stp pbs lrp lrg lrb lrk atf
                dha: dollar_hash { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOLLAR>, <&kp HASH>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                eqt: equal_tilde { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp EQUAL>, <&kp TILDE>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                plm: plus_minus { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp PLUS>, <&kp MINUS>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                spc: star_percent { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp STAR>, <&kp PERCENT>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                pbs: pipe_bslash { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp PIPE>, <&kp BACKSLASH>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                lrp: lperan_rperan { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LPAR>, <&kp RPAR>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                lrg: gthan_lthan { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LT>,<&kp GT> ; mods = <(MOD_LSFT|MOD_RSFT)>; };
                lrb: lbrace_rbrace { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LBRC>, <&kp RBRC>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                lrk: lbraket_rbraket { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LBKT>, <&kp RBKT>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                atf: at_fslash { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp AT>, <&kp FSLH>; mods = <(MOD_LSFT|MOD_RSFT)>; };

        // NAVIGATION LAYER
              //  A, W, D & S KEYS MODDED FOR QWERTY NAVIGATION:  a2l w2u d2r s2d
                a2l: s_to_left { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp A>, <&kp LEFT>; mods = <(MOD_RGUI|MOD_LGUI)>; };
                w2u: e_to_up { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp W>, <&kp UP>; mods = <(MOD_RGUI|MOD_LGUI)>; };
                d2r: f_to_right { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp D>, <&kp RIGHT>; mods = <(MOD_RGUI|MOD_LGUI)>; };
                s2d: c_to_down { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp S>, <&kp DOWN>; mods = <(MOD_RGUI|MOD_LGUI)>; };

        //  MATHS LAYER:
        // special & unicode characters of formal logic, set, number & group theory

        };

        // LAYER KEYMAPS
        keymap {
                compatible = "zmk,keymap";
                // DEFAULT LAYER
                mrx_layer {
        /*   tab-esc   qmark-xmark  cma-semi  dot-col  P      Y        M      L     D,^     C     F   opt-caps
            lsft-under      O           A       E      I      U        H      N,<    T     R,>    S   rshft-minus
                ' "     amp-slash       X       Q      K      J        V      B     G,v     W     Z   bshft-del
                                 LGUI-QWE     SPC    RET      RET    SPC      RGUI-NUM   */

                        bindings = <  // tes qxm csc dcl bsd opc qtq asl qtq lcc rcc  h2l l2u t2r n2d
        &tes       &qxm       &csc       &dcl        &kp P     &kp Y        &kp M      &l2u        &kp D      &kp C    &kp F    &opc RALT 0
        &lsu      &kp O      &kp A      &kp E        &kp I     &kp U        &h2l       &n2d        &t2r       &kp R    &kp S    &rsm
     &kp SQT       &asl      &kp X      &kp Q        &kp K     &kp J        &kp V      &kp B       &kp G      &kp W    &kp Z    &bsd
                                &jtl LGUI QWE    &kp SPACE   &kp RET        &kp RET    &kp SPACE   &jtl RGUI NUM
                        >;
                };
                // QWERTY LAYER
                qwe_layer {
      /*   tab-esc      Q     W       E,^       R          T       Y         U        I         O        p            opt-caps
        lsft_under      A     S,<     D        F,>         G       H         J        K         L        ' "          rshft-minus
         amp-slash      Z     X      C,v        K          J       V         B        com-semi  dot-col  qmark-xmark  bshft-del
                                LGUI-MRX      SPC        RET       RET      SPC       RGUI-NUM   */

                        bindings = <  // tes qxm csc dcl bsd opc lsq asl rsn lcc rcc a2l w2u d2r s2d
           ___    &kp Q      &w2u     &kp E     &kp R     &kp T       &kp Y     &kp U     &kp I      &kp O     &kp P     ___
           ___    &a2l       &s2d      &d2r     &kp F     &kp G       &kp H     &kp J     &kp K      &kp L     &kp SQT   ___
          &asl    &kp Z     &kp X     &kp C     &kp V     &kp B       &kp N     &kp M     &csc       &dcl      &qxm      ___
                              &jtl LGUI MRX       ___       ___       ___       ___       &jtl RGUI NUM
                        >;
                };
               // NUMBER LAYER
               num_layer {
/*         tab-esc     $ #       , ;       : .      ^        = ~         + -        * %       xxx       ^-^C      sleep       opt-caps
        lsft-under    8-F8      6-F6      4-F4    2-F2      0-F0         1-F1       3-F3      5-F5      7-F7      9-F9        rshft-minus
              '  "     & /   (??)-^X       |-\     [ ]       < >         ( )^V      { }       xxx       xxx       @ /         bshft-del
                                      LGUI-QWE     SPC       RET         RET        SPC       RGUI-MRX   */

                        bindings = <  // dha eqt plm spc pbs lrk lrg lrp lrb  atf
       ___      &dha       ___        ___   &kp CARET       &eqt         &plm       &spc      xxx        ___      &kp C_SLEEP  ___
       ___    &kp N8    &kp N6     &kp N4      &kp N2     &kp N0         &kp N1     &kp N3    &kp N5     &kp N7   &kp N9       ___
       ___       ___       ___       &pbs        &lrk       &lrg         &lrp       &lrb      xxx        xxx      &atf         ___
                            &jtl LGUI QWE         ___        ___         ___        ___       &jtl RGUI MRX
                        >;
                };
                // MATH THEORY LAYER 
/*            mth_layer {
         /* trans    &        ,      .       ∨       +         -        ^        =      *       #    trans
            trans   8-F8    6-F6    4-F4    2-F2    0-F0      1-F1     3-F3     5-F5   7-F7   9-F9   trans
              |     @-/       [      <       {       (          )       }        >      ]       \    trans
                                lcm_cnt  lspc-num   &RET      &RET   rsp_sym  rcm_cnt  */

/*                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL ___   ___ ___   ___   ___      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSFT ___   ___ ___   ___   ___      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI ___   &kp SPACE   &kp RET   ___    &kp RALT
                        >;
                };  */
         };
  };
