    /** Copyright (c) 2020 The ZMK Contributors* * SPDX-License-Identifier: MIT */
        #include <behaviors.dtsi>
        #include <dt-bindings/zmk/bt.h>
        #include <dt-bindings/zmk/keys.h>
        #include <dt-bindings/zmk/rgb.h>
        // #include "zmk-helpers/helper.h"
        // #include "zmk-helpers/unicode-chars/greek.dtsi"

        #define MRX 0       // Mr. X's Keyboard Scheme
        #define QWE 1       // QWERTY
        #define NUM 2       // NUMBER
     // #define THE 3       // THEORY
        #define ___ &none
        #define --- &trans
/*
        1         2         3         4         5         6         7         8         9         0        11       12       13        14        15        16        17        18        19        20        21        22
*/
        // CAPS-WORD CONTINUE LIST TURNING IT INTO CAPS-SENTENCE
        &caps_word { continue-list = <SPACE DOT COMMA SEMI COLON UNDER MINUS AMPS EXCL SLASH TAB STAR PIPE BSPC>; };
/ {
        behaviors {
        //  DEFAULT LAYER
        //  SHIFTED KEYS 'SWITCHING PARTNERS' MOD-MORPH BEHAVIORS: morphs shifted keys: to different shifted & un-shifted characters
                tes: tab_escape { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp TAB>, <&kp ESC>; mods = <(MOD_RSFT|MOD_RSFT)>; };
                qxm: qmark_xmark { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp QMARK>, <&kp EXCL>; mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <(MOD_LSFT)>; };
                csc: comma_scolon { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp COMMA>, <&kp SEMI>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                dcl: dot_colon { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOT>, <&kp COLON>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                bsd: back_delete { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp BSPC>, <&kp DEL>; mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <(MOD_RSFT)>; };
                lsu: lsft_under { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LSFT>, <&kp UNDER>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                rsm: rsft_minus { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp RSFT>, <&kp MINUS>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                asl: amps_slash { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp AMPS>, <&kp SLASH>; mods = <(MOD_LSFT|MOD_RSFT)>; };

        //  OPTION KEY 'CAP-SENTENCE' CAPS-WORD & HOLD-TAP BEHAVIORS: mods caps-word to caps-sentence: space, letters, punctuation, & mod keys added to continue
                opc: opt_caps { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&kp>, <&caps_word>; tapping-term-ms = <280>; flavor = "tap-preferred"; }; // '&opc RALT 0' in keymap

        //  LAYER SWITCHING: hold tap of command key with format - &jtl MODIFIER LAYER
                jtl: jump_to_layer { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&kp>, <&to>; tapping-term-ms = <280>; quick-tap-ms = <0>; flavor = "tap-preferred"; }; // '&jtl R/LGUI LAYER' in keymaps

        //  NUMBER LAYER SHIFTED KEYS SWITCHING PARTNERS   pit hbs afs lrp lrc lrb lrk pit   nf tf thf fof fif sif sef eif nif zef elf twf
                pit: pipe_tilde { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp PIPE>, <&kp TILDE>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                hbs: hash_bslash { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp HASH>, <&kp BSLH>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                afs: at_fslash { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp AT>, <&kp FSLH>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                lrp: lperan_rperan { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LPAR>, <&kp RPAR>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                lrg: gthan_lthan { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LT>,<&kp GT> ; mods = <(MOD_LSFT|MOD_RSFT)>; };
                lrb: lbrace_rbrace { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LBRC>, <&kp RBRC>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                lrk: lbraket_rbraket { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LBKT>, <&kp RBKT>; mods = <(MOD_LSFT|MOD_RSFT)>; };

        // NAVIGATING WITH ARROW KEYS
                // key: name { compatible = "zmk,behavior-mod-morph"; label = "LABEL"; #binding-cells = <0>; bindings = <WITHOUT MOD BEHAVIOR>, <WITH MOD BEHAVIOR>; mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>; keep-mods = <(MOD_LSFT)>; };
                //  N, D, R & G KEYS MODDED FOR MRX NAVIGATION:  n2l d2u r2r t2d

               n2l: n_to_left { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N>, <&kp LEFT>; mods = <(MOD_RGUI|MOD_LGUI)>; };
               d2u: d_to_up { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp D>, <&kp UP>; mods = <(MOD_RGUI|MOD_LGUI)>; };
               r2r: r_to_right { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp R>, <&kp RIGHT>; mods = <(MOD_RGUI|MOD_LGUI)>; };
               t2d: t_to_down { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp T>, <&kp DOWN>; mods = <(MOD_RGUI|MOD_LGUI)>; };

              //  S, T, F & C KEYS MODDED FOR QWE NAVIGATION:  s2l e2u f2r d2d
                s2l: s_to_left { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp S>, <&kp LEFT>; mods = <(MOD_RGUI|MOD_LGUI)>; };
                e2u: e_to_up { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp E>, <&kp UP>; mods = <(MOD_RGUI|MOD_LGUI)>; };
                f2r: f_to_right { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp F>, <&kp RIGHT>; mods = <(MOD_RGUI|MOD_LGUI)>; };
                d2d: c_to_down { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp D>, <&kp DOWN>; mods = <(MOD_RGUI|MOD_LGUI)>; };

        //  SHIFT NUMBER KEYS FOR F-KEYS
              onf: one_fone { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N1>, <&kp F1>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              tof: two_ftwo { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N2>, <&kp F2>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              thf: three_fthree { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N3>, <&kp F3>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              fof: four_ffour { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N4>, <&kp F4>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              fif: five_ffive { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N5>, <&kp F5>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              sif: two_fsix { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N6>, <&kp F6>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              sef: two_fseven { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N7>, <&kp F7>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              eif: eight_feight { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N8>, <&kp F8>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              nif: nine_fnine { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N9>, <&kp F9>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              zef: zero_ften { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N0>, <&kp F10>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              elf: minus_feleven { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp MINUS>, <&kp F11>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              twf: two_ftwelve { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp PLUS>, <&kp F12>; mods = <(MOD_LSFT|MOD_RSFT)>; };

        //  BEHAVIORS FOR UNICODE LOGIC, SET & NUMBER THEORY CHARACTERS

        };
        keymap {
                compatible = "zmk,keymap";
                // BASE LAYER
                mrx_layer {
        /*   tab-esc   qmark-xmark  cma-semi  dot-col  P      Y        M      L     D,^     C     F   opt-caps
            lsft-under      O           A       E      I      U        H      N,<    T     R,>    S   rshft-minus
                ' "     amp-slash       X       Q      K      J        V      B     G,v     W     Z   bshft-del
                                 LGUI-QWE     SPC    RET      RET    SPC      RGUI-NUM   */

                        bindings = <  // tes qxm csc dcl bsd opc qtq asl qtq lcc rcc n2l d2u r2r t2d
        &tes       &qxm       &csc       &dcl        &kp P     &kp Y        &kp M      &kp L       &d2u       &kp C    &kp F    &opc RALT 0
        &lsu      &kp O      &kp A      &kp E        &kp I     &kp U        &kp H      &n2l        &t2d       &r2r     &kp S    &rsm
     &kp SQT       &asl      &kp X      &kp Q        &kp K     &kp J        &kp V      &kp B       &kp G      &kp W    &kp Z    &bsd
                                &jtl LGUI QWE    &kp SPACE   &kp RET        &kp RET    &kp SPACE   &jtl RGUI NUM
                        >;
                };
                // QWERTY LAYER
                qwe_layer {
      /*   tab-esc      Q     W       E,^       R          T       Y         U        I         O        p            opt-caps
        lsft_under      A     S,<     D        F,>         G       H         J        K         L        ' "          rshft-minus
         amp-slash      Z     X      C,v        K          J       V         B        com-semi  dot-col  qmark-xmark  bshft-del
                                LGUI-NUM      SPC        RET       RET      SPC       RGUI-MRX   */

                        bindings = <  // tes qxm csc dcl bsd opc lsq asl rsn lcc rcc s2l e2u f2r d2d
        &trans    &kp Q     &kp W       &e2u     &kp R     &kp T       &kp Y      &kp U     &kp I      &kp O     &kp P     &trans
        &trans    &kp A      &s2l       &d2d      &f2r     &kp G       &kp H      &kp J     &kp K      &kp L     &kp SQT   &trans
          &asl    &kp Z     &kp X      &kp C     &kp V     &kp B       &kp N      &kp M     &csc       &dcl      &qxm      &trans
                               &jtl LGUI NUM    &trans    &trans       &trans     &trans    &jtl RGUI MRX
                        >;
                };
               // NUMBER LAYER
               num_layer {                                                                  // cmd-copy
/*         tab-esc       $      , ;       : .       ^       +        -       *       =         XXX-^C   @ /     opt-caps
        lsft-under    8-F8     6-F6      4-F4    2-F2    0-F0        1-F1    3-F3    5-F5      7-F7     9-F9    rshft-minus
        pipe-tilde     & /    XXX-^X      XXX     [ ]     < >        ( )^V   { }     XXX       XXX      #-\     bshft-del
                                     LGUI-NUM     SPC     RET        RET     SPC     RGUI-MRX
                          // cmd-cut                            // cmd-paste                                              */

                        bindings = <
       &trans    &kp DLLR    &trans    &trans   &kp CARET   &kp PLUS       &kp MINUS   &kp STAR    &kp EQUAL    &none     &hbs     &trans
       &trans    &kp N8      &kp N6    &kp N4      &kp N2     &kp N0       &kp N1      &kp N3      &kp N5       &kp N7    &kp N9   &trans
       &pit      &trans       &none     &none        &lrk       &lrg       &lrp        &lrb        &none        &none     &afs     &trans
                                &jtl LGUI QWE      &trans     &trans       &trans      &trans      &jtl RGUI MRX
                        >;
                };

/*            the_layer {
         /* trons    &        ,      .       ∨       +         -        ^        =      *       #    trans
            trans   8-F8    6-F6    4-F4    2-F2    0-F0      1-F1     3-F3     5-F5   7-F7   9-F9   trans
              |     @-/       [      <       {       (          )       }        >      ]       \    trans
                                lcm_cnt  lspc-num   &RET      &RET   rsp_sym  rcm_cnt  */

/*                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };  */
         };
  };
