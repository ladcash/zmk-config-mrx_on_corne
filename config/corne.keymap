    /** Copyright (c) 2020 The ZMK Contributors* * SPDX-License-Identifier: MIT */
        #include <behaviors.dtsi>
        #include <dt-bindings/zmk/bt.h>
        #include <dt-bindings/zmk/keys.h>
        #include <dt-bindings/zmk/rgb.h>

        #define MRXS 0
        #define QWERTY  1
        #define NUMSYM 2
        #define GAMERS
        // #define THEORY 3

        // ADDS CONTINUE LIST TO CAPS-WORD TURNING IT INTO CAPS-SENTENCE
        &caps_word { continue-list = <SPACE DOT COMMA SEMI COLON UNDER MINUS AMPS EXCL SLASH TAB STAR PIPE BSPC>; }; // <RETURN> cancels caps word
/ {
        behaviors {
        //  DEFAULT LAYER
        //  SHIFTED KEYS 'SWITCHING PARTNERS' MOD-MORPH BEHAVIORS: morphs shifted keys: to different shifted & un-shifted characters
                tes: tab_escape { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp TAB>, <&kp ESC>; mods = <(MOD_RSFT|MOD_RSFT)>; };
                qxm: qmark_xmark { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp QMARK>, <&kp EXCL>; mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <(MOD_LSFT)>; };
                csc: comma_scolon { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp COMMA>, <&kp SEMI>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                dcl: dot_colon { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOT>, <&kp COLON>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                bsd: back_delete { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp BSPC>, <&kp DEL>; mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <(MOD_RSFT)>; };
                lsu: lsft_under { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LSFT>, <&kp UNDER>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                rsm: rsft_minus { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp RSFT>, <&kp MINUS>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                asl: amps_slash { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp AMPS>, <&kp SLASH>; mods = <(MOD_LSFT|MOD_RSFT)>; };
//         1         2         3         4         5         6         7         8         9         0         1         2         3         4         56         7         8         9
        //  OPTION KEY 'CAP-SENTENCE' CAPS-WORD & HOLD-TAP BEHAVIORS: mods caps-word to caps-sentence: space, letters, punctuation, & mod keys added to continue
                opc: opt_caps { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&kp>, <&caps_word>; tapping-term-ms = <250>; flavor = "hold-preferred"; }; // '&opc RALT 0' in keymap

        //  COMMAND KEY 'CONTROL' HOLD-TAP BEHAVIORS: mods CMND keys to: hold-> CTRL & tap-> CMD+longSTICKY-KEY (tap & next key pressed gives CMD-key)
                lsk: long_stickey { compatible = "zmk,behavior-sticky-key"; #binding-cells = <1>; bindings = <&kp>; release-after-ms = <4000>; quick-release; /delete-property/ignore-modifiers;} ;
                lcc: lcmd_control { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&kp>, <&lsk>; tapping-term-ms = <250>; quick-tap-ms = <0>; flavor = "tap-preferred"; }; // '&lcc LCTRL LCMD' in keymap
                rcc: rcmd_control { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&kp>, <&lsk>; tapping-term-ms = <250>; quick-tap-ms = <0>; flavor = "tap-preferred"; };

        //  RETURN KEYS 'TO LAYERS' HOLD-TAP BEHAVIORS: mods SPACE keys to: hold-to layer, tap->RET or RET2, 2nd tap returns to starting layer
                // MR X's LAYER TO numsym LAYER & BACK AGAIN
                mtn: mrx_to_numsym { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&to>, <&kp>; tapping-term-ms = <250>; quick-tap-ms = <0>; flavor = "tap-preferred";};  // '&mtn MRXS RET' in keymap
                ntm: numsym_to_mrx { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&to>, <&kp>; tapping-term-ms = <250>; quick-tap-ms = <0>; flavor = "tap-preferred"; }; // '&ntm NUMSYM RET2' in keymap

                // QWERTY LAYER TO NUMSYM LAYER & BACK AGAIN
                qtn: que_to_numsym { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&tog>, <&kp>; tapping-term-ms = <250>; quick-tap-ms = <0>; flavor = "tap-preferred"; }; // '&qtn numsym N' in keymap
                ntq: num_to_que { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&to>, <&kp>; tapping-term-ms = <250>; quick-tap-ms = <0>; flavor = "tap-preferred"; }; // '&ntq QWERTY LBRC' in keymap
                // MR X's LAYER TO QWERTY LAYER & BACK AGAIN
                mtq: mrx_to_qwerty { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&tog>, <&kp>; tapping-term-ms = <250>; quick-tap-ms = <0>; flavor = "tap-preferred"; }; // '&mtq QWERTY Q' in keymap
                qtm: que_to_mrx { compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>; bindings = <&to>, <&kp>; tapping-term-ms = <250>; quick-tap-ms = <0>; flavor = "tap-preferred"; }; // '&qtm MRXS N3' in keymap

        //  NUMSYM LAYER SHIFTED KEYS SWITCHING PARTNERS   pit hbs afs lrp lrc lrb lrk pit   nf tf thf fof fif sif sef eif nif zef elf twf
                pit: pipe_tilde { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp PIPE>, <&kp TILDE>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                hbs: hash_bslash { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp HASH>, <&kp BSLH>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                afs: at_fslash { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp AT>, <&kp FSLH>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                lrp: lperan_rperan { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LPAR>, <&kp RPAR>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                lrc: gthan_lthan { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LT>,<&kp GT> ; mods = <(MOD_LSFT|MOD_RSFT)>; };
                lrb: lbrace_rbrace { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LBRC>, <&kp RBRC>; mods = <(MOD_LSFT|MOD_RSFT)>; };
                lrk: lbraket_rbraket { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LBKT>, <&kp RBKT>; mods = <(MOD_LSFT|MOD_RSFT)>; };

        //  SHIFT NUMSYM KEYS FOR F-KEYS
              onf: one_fone { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N1>, <&kp F1>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              tof: two_ftwo { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N2>, <&kp F2>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              thf: three_fthree { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N3>, <&kp F3>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              fof: four_ffour { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N4>, <&kp F4>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              fif: five_ffive { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N5>, <&kp F5>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              sif: two_fsix { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N6>, <&kp F6>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              sef: two_fseven { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N7>, <&kp F7>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              eif: eight_feight { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N8>, <&kp F8>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              nif: nine_fnine { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N9>, <&kp F9>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              zef: zero_ften { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp N0>, <&kp F10>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              elf: minus_feleven { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp MINUS>, <&kp F11>; mods = <(MOD_LSFT|MOD_RSFT)>; };
              twf: two_ftwelve { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp PLUS>, <&kp F12>; mods = <(MOD_LSFT|MOD_RSFT)>; };

        //  BEHAVIORS FOR UNICODE LOGIC, SET & NUMBER THEORY CHARACTERS
            //
        };
        keymap {
                compatible = "zmk,keymap";

                mrxs_layer {
        /*   tab-esc   qmark-xmark  cma-semi   dot-col     P      Y        M      L        D      C      F   opt-caps
                 ' "        O          A          E        I      U        H      N        T      R      S   rshft-minus
          lsft-under    amp-slash      X          Q        K      J        V      B        G      W      Z   bshft-del
                           lcm_cnt    lspc-num   &RET     &RET  rsp_sym  rcm_cnt   */

                        bindings = <  // tes qxm csc dcl bsd opc qtq asl qtq lcc rcc
        &kp SQT  &qxm   &csc             &dcl      &kp P             &kp Y      &kp M            &kp L      &kp D            &kp C    &kp F    &opc RALT 0
        &lsu     &kp O  &kp A           &kp E      &kp I             &kp U      &kp H            &kp N      &kp T            &kp R    &kp S    &rsm
        &tes     &asl   &kp X   &mtq QWERTY Q      &kp K             &kp J      &kp V            &kp B      &kp G            &kp W    &kp Z    &bsd
                              &lcc LCTRL LCMD  &kp SPACE  &ntm NUMSYM RET2      &mtn NUMSYM RET  &kp SPACE  &rcc RCTRL RCMD
                        >;
                };

                qwerty_layer {
            /*   tab-esc   qmark-xmark  cma-semi   dot-col     P      Y        M      L        D      C      F   opt-caps
                     ' "        O          A          E        I      U        H      N        T      R      S   rshft-minus
              lsft-under    amp-slash      X          Q        K      J        V      B        G      W      Z   bshft-del
                                        lcm_cnt  lspc-num   &RET     &RET  rsp_sym  rcm_cnt   */

                        bindings = <  // tes qxm csc dcl bsd opc lsq asl rsn lcc rcc
        &asl   &qtm MRXS Q   &kp W    &kp E    &kp R    &kp T      &kp Y           &kp U    &kp I   &kp O    &kp P     &trans
        &trans   &kp A       &kp S    &kp D    &kp F    &kp G      &kp H           &kp J    &kp K   &kp L    &kp SQT   &trans
        &trans   &kp Z       &kp X    &kp C    &kp V    &kp B      &ntm NUMSYM N   &kp M    &csc    &dcl     &qxm      &trans
                                     &trans   &trans   &trans      &trans          &trans   &trans
                        >;
                };

               numsym_layer {
/*             | ~       $      , ;       : .         ^      +        -       *        =      &none    @ /     opt-caps
        lsft-under    8-F8     6-F6      4-F4      2-F2   0-F0        1-F1    3-F3     5-F5   7-F7     9-F9    rshft-minus
           tab-esc    & /     &none     &none       [ ]    < >        ( )     { }      &none  &none    #-\     bshft-del
                                      lcm_cnt  lspc-num   &RET        &RET    rsp_sym  rcm_cnt                       */
            //  pit hbs afs lrp lrc lrb lrk pit   nf tf thf fof fif sif sef eif nif zef elf twf
                        bindings = <
//         1         2         3         4         5         6         7         8         9         0         1         2         3         4         56         7         8         9
         &pit  &kp DLLR  &trans   &trans  &kp CARET  &kp PLUS      &kp MINUS   &kp STAR        &kp EQUAL  &none    &hbs    &trans
       &trans  &kp N8    &kp N6   &kp N4     &kp N2    &kp N0      &kp N1    &ntm MRXS N3      &kp N5     &kp N7   &kp N9  &trans
       &trans  &trans    &none    &none        &lrk      &lrc      &lrp     &ntq QWERTY LPAR   &none      &none    &afs    &trans
                                  &trans     &trans     &trans     &trans      &trans          &trans
                        >;
                };
/*
                theory_layer {
        /* glass    &        ,      .       ∨       +         -        ^        =      *       #    trans
            glass   8-F8    6-F6    4-F4    2-F2    0-F0      1-F1     3-F3     5-F5   7-F7   9-F9   trans
              |     @-/       [      <       {       (          )       }        >      ]       \    trans
                                lcm_cnt  lspc-num   &RET      &RET   rsp_sym  rcm_cnt  */
/*                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                }; */
         };
  };
